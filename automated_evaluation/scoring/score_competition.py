"""This program scores all trials in the competition and generates graphs with results"""

import os
import yaml
import matplotlib.pyplot as plt
from matplotlib.axes import Axes

from score_trial import score_trial, TrialInfo


def get_competing_teams() -> list[str]:
    """Gets a list of all the competing teams from competitor configs

    Returns:
        list[str]: List of all team names
    """
    automated_eval_folder = os.path.abspath(os.path.join(__file__, "..", ".."))

    competitor_configs: list[str] = []
    for root, _, files in os.walk(os.path.join(automated_eval_folder, "competitor_configs")):
        for file in files:
            if not file.endswith('.yaml'):
                continue

            if "nist_competitor" in file:
                continue

            competitor_configs.append(os.path.join(root, file))

    team_names = []
    for path in competitor_configs:
        try:
            with open(path, 'r', encoding='utf-8') as f:
                trial_config = yaml.safe_load(f)
        except (IOError, yaml.YAMLError):
            print(f'Unable to parse trial config: {path}')

        team_names.append(trial_config['team_name'])

    return team_names


def get_trial_names() -> list[str]:
    """Parses the logs folder of each team found to find all the trials which have been run.

    Returns:
        list[str]: list of trial names
    """
    automated_eval_folder = os.path.abspath(os.path.join(__file__, "..", ".."))

    trial_names = []

    for _, _, files in os.walk(os.path.join(automated_eval_folder, "trials")):
        for file in files:
            if file.endswith('.yaml'):
                trial_names.append(file.replace(".yaml", ""))

    return trial_names


def add_labels(centers, y, largest_y):
    """Adds labels with an offset to the bars on the graph

    Args:
        centers (List[float]): Centers of each bar
        y (List[float]): List of the y values, scores in this case
        largest_y (float): Largest score for this graph. Used to scale the offset of the label
    """
    offset = largest_y/65
    for i, _ in enumerate(y):
        plt.text(centers[i], offset + (y[i] if y[i]>0 else (largest_y / 70)), y[i], ha = 'center', )

def generate_trial_graphs(results: TrialInfo):
    """Generates the final score graphs for each trial

    Args:
        results (TrialInfo): The information for the trial being generated by the graph
    """
    
    trial_scores = dict(sorted(results.trial_scores.items(), key=lambda item: -item[1]))
    num_teams = len(results.team_submissions)
    bar_width = 0.15 * num_teams
    
    centers = []
    for i in range(num_teams):
        centers.append(0.5 + 1.2 * i)
    
    automated_eval_folder = os.path.abspath(os.path.join(__file__, "..", ".."))
    graphs_path = os.path.join(automated_eval_folder, "graphs")
    if not os.path.exists(graphs_path):
        os.mkdir(graphs_path)
    
    scores = [round(val,3) for val in trial_scores.values()]
    trial_scores = {k: (max(scores)/70 if v == 0 else v) for k,v in trial_scores.items()}
    plt.figure(figsize = (10, 5))
    # creating the bar plot
    plt.bar(centers, trial_scores.values(), color ='steelblue', width = bar_width)
    add_labels(centers, scores, max(scores))
    plt.xlim(0, 1.2 * num_teams - 0.25)
    plt.xlabel("Team name")
    plt.ylim(0, max([val for val in trial_scores.values()]) * 1.075)
    plt.ylabel("Score")
    trial_title = results.trial_name.replace("_"," ")
    plt.title(f"Final scores for trial {trial_title}")
    plt.xticks(centers, list(trial_scores.keys()))
    plt.savefig(os.path.join(graphs_path,f"{results.trial_name}.png"))
    plt.clf()


def generate_summary(final_scores: dict[str, float]):
    """Generates the final score graph

    Args:
        final_scores (dict[str, float]): The dictionary of final scores
    """
    num_teams = len(final_scores)
    bar_width = 0.15 * num_teams
    print("Final Scores:")
    centers = []
    for i in range(num_teams):
        centers.append(0.6 + 1.2 * i)
    for team, score in final_scores.items():
        print(f"\t{team}: {score}")
    automated_eval_folder = os.path.abspath(os.path.join(__file__, "..", ".."))
    graphs_path = os.path.join(automated_eval_folder, "graphs")
    if not os.path.exists(graphs_path):
        os.mkdir(graphs_path)
    scores = [round(val,3) for val in final_scores.values()]
    final_scores = {k: (max(scores)/70 if v == 0 else v) for k,v in final_scores.items()}
    plt.figure(figsize = (10, 5))
    # creating the bar plot
    plt.bar(centers, final_scores.values(), color ='steelblue', width = bar_width)
    add_labels(centers, scores, max(scores))
    plt.xlim(0, 1.2 * num_teams - 0.25)
    plt.xlabel("Team name")
    plt.ylim(0, max([val for val in final_scores.values()]) * 1.05)
    plt.ylabel("Score")
    plt.xticks(centers, list(final_scores.keys()))
    plt.title("Final scores")
    plt.savefig(os.path.join(graphs_path, "final_scores.png"))
    plt.clf()


def main():
    """Scores all trials and generates graphs
    """
    # Get list of team names from competitor_configs directory (exclude nist_competitor)
    competing_teams = get_competing_teams()

    # Get name of all trials from trials directory
    trial_names = get_trial_names()

    final_scores: dict[str, float] = {team: 0.0 for team in competing_teams}

    # For all trials
    for trial in sorted(trial_names):

        # Get trial results
        results = score_trial(trial, competing_teams)

        # Add score for each team to final scores
        for team, score in results.trial_scores.items():
            if not team in final_scores.keys():
                continue

            final_scores[team] += score

        # Generate graphs
        generate_trial_graphs(results)
    # Sort final scores in descending order
    final_scores = dict(sorted(final_scores.items(), key=lambda item: -item[1]))

    # Generate summary
    generate_summary(final_scores)


if __name__ == "__main__":
    main()
    